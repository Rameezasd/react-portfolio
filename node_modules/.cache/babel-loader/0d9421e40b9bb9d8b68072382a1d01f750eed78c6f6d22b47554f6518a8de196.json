{"ast":null,"code":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\");\nvar reduce = require(\"reducible/reduce\");\nvar isError = require(\"reducible/is-error\");\nvar end = require(\"reducible/end\");\nfunction drop(source, n) {\n  /**\n  Returns sequence of all `source`'s items after `n`-th one. If source contains\n  less then `n` items empty sequence is returned.\n   ## Example\n   print(drop([ 1, 2, 3, 4 ], 2))  // => <stream 3 4 />\n  print(drop([ 1, 2, 3 ], 5))     // => <stream />\n  **/\n\n  // If drop `<= 0` then optimize by returning source itself. If `Infinity`\n  // return empty.\n  if (n <= 0) return source;\n  if (n === Infinity) return void 0;\n  return reducible(function reduceDrop(next, initial) {\n    var count = n;\n    reduce(source, function reduceDropSource(value, result) {\n      // If value is end of collection or is an error (which also includes\n      // end of collection) just pass it through, `reducible` will take care\n      // of everything.\n      if (value === end) return next(value, result);\n      if (isError(value)) return next(value, result);\n      // If count of items has reached `0` just keep on passing values.\n      if (count === 0) return next(value, result);\n      // Otherwise just decrement count and return `result`.\n      count = count - 1;\n      return result;\n    }, initial);\n  });\n}\nmodule.exports = drop;","map":{"version":3,"names":["reducible","require","reduce","isError","end","drop","source","n","Infinity","reduceDrop","next","initial","count","reduceDropSource","value","result","module","exports"],"sources":["D:/New folder (3)/websites/node_modules/reducers/drop.js"],"sourcesContent":["\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\nfunction drop(source, n) {\n  /**\n  Returns sequence of all `source`'s items after `n`-th one. If source contains\n  less then `n` items empty sequence is returned.\n\n  ## Example\n\n  print(drop([ 1, 2, 3, 4 ], 2))  // => <stream 3 4 />\n  print(drop([ 1, 2, 3 ], 5))     // => <stream />\n  **/\n\n  // If drop `<= 0` then optimize by returning source itself. If `Infinity`\n  // return empty.\n  if (n <= 0) return source\n  if (n === Infinity) return void(0)\n  return reducible(function reduceDrop(next, initial) {\n    var count = n\n    reduce(source, function reduceDropSource(value, result) {\n      // If value is end of collection or is an error (which also includes\n      // end of collection) just pass it through, `reducible` will take care\n      // of everything.\n      if (value === end) return next(value, result)\n      if (isError(value)) return next(value, result)\n      // If count of items has reached `0` just keep on passing values.\n      if (count === 0) return next(value, result)\n      // Otherwise just decrement count and return `result`.\n      count = count - 1\n      return result\n    }, initial)\n  })\n}\n\nmodule.exports = drop\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAC3C,IAAIG,GAAG,GAAGH,OAAO,CAAC,eAAe,CAAC;AAElC,SAASI,IAAIA,CAACC,MAAM,EAAEC,CAAC,EAAE;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;;EAIE;EACA;EACA,IAAIA,CAAC,IAAI,CAAC,EAAE,OAAOD,MAAM;EACzB,IAAIC,CAAC,KAAKC,QAAQ,EAAE,OAAO,KAAK,CAAE;EAClC,OAAOR,SAAS,CAAC,SAASS,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAAE;IAClD,IAAIC,KAAK,GAAGL,CAAC;IACbL,MAAM,CAACI,MAAM,EAAE,SAASO,gBAAgBA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACtD;MACA;MACA;MACA,IAAID,KAAK,KAAKV,GAAG,EAAE,OAAOM,IAAI,CAACI,KAAK,EAAEC,MAAM,CAAC;MAC7C,IAAIZ,OAAO,CAACW,KAAK,CAAC,EAAE,OAAOJ,IAAI,CAACI,KAAK,EAAEC,MAAM,CAAC;MAC9C;MACA,IAAIH,KAAK,KAAK,CAAC,EAAE,OAAOF,IAAI,CAACI,KAAK,EAAEC,MAAM,CAAC;MAC3C;MACAH,KAAK,GAAGA,KAAK,GAAG,CAAC;MACjB,OAAOG,MAAM;IACf,CAAC,EAAEJ,OAAO,CAAC;EACb,CAAC,CAAC;AACJ;AAEAK,MAAM,CAACC,OAAO,GAAGZ,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}