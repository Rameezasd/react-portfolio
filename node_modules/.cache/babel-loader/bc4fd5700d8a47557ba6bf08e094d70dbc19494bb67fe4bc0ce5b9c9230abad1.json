{"ast":null,"code":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\");\nvar reduce = require(\"reducible/reduce\");\nvar end = require(\"reducible/end\");\nvar slicer = Array.prototype.slice;\nfunction append(left, right) {\n  /**\n  Returns sequences of items in the `left` sequence followed by the\n  items in the `right` sequence.\n  **/\n  return reducible(function reduceConcatination(next, initial) {\n    reduce(left, function reduceLeft(value, result) {\n      return value === end ? reduce(right, next, result) : next(value, result);\n    }, initial);\n  });\n}\nfunction concat(left, right /*, ...rest*/) {\n  /**\n  Returns a sequence representing the concatenation of the elements in the\n  supplied arguments, in the given order.\n   print(concat([ 1 ], [ 2, 3 ], [ 4, 5, 6 ])) // => <stream 1 2 3 4 5 6 />\n   **/\n  switch (arguments.length) {\n    case 1:\n      return left;\n    case 2:\n      return append(left, right);\n    default:\n      return slicer.call(arguments).reduce(append);\n  }\n}\nmodule.exports = concat;","map":{"version":3,"names":["reducible","require","reduce","end","slicer","Array","prototype","slice","append","left","right","reduceConcatination","next","initial","reduceLeft","value","result","concat","arguments","length","call","module","exports"],"sources":["D:/New folder (3)/websites/node_modules/reducers/concat.js"],"sourcesContent":["\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar end = require(\"reducible/end\")\n\nvar slicer = Array.prototype.slice\n\nfunction append(left, right) {\n  /**\n  Returns sequences of items in the `left` sequence followed by the\n  items in the `right` sequence.\n  **/\n  return reducible(function reduceConcatination(next, initial) {\n    reduce(left, function reduceLeft(value, result) {\n      return value === end ? reduce(right, next, result) :\n             next(value, result)\n    }, initial)\n  })\n}\n\nfunction concat(left, right /*, ...rest*/) {\n  /**\n  Returns a sequence representing the concatenation of the elements in the\n  supplied arguments, in the given order.\n\n  print(concat([ 1 ], [ 2, 3 ], [ 4, 5, 6 ])) // => <stream 1 2 3 4 5 6 />\n\n  **/\n  switch (arguments.length) {\n    case 1: return left\n    case 2: return append(left, right)\n    default: return slicer.call(arguments).reduce(append)\n  }\n}\n\nmodule.exports = concat\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIE,GAAG,GAAGF,OAAO,CAAC,eAAe,CAAC;AAElC,IAAIG,MAAM,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK;AAElC,SAASC,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC3B;AACF;AACA;AACA;EACE,OAAOV,SAAS,CAAC,SAASW,mBAAmBA,CAACC,IAAI,EAAEC,OAAO,EAAE;IAC3DX,MAAM,CAACO,IAAI,EAAE,SAASK,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC9C,OAAOD,KAAK,KAAKZ,GAAG,GAAGD,MAAM,CAACQ,KAAK,EAAEE,IAAI,EAAEI,MAAM,CAAC,GAC3CJ,IAAI,CAACG,KAAK,EAAEC,MAAM,CAAC;IAC5B,CAAC,EAAEH,OAAO,CAAC;EACb,CAAC,CAAC;AACJ;AAEA,SAASI,MAAMA,CAACR,IAAI,EAAEC,KAAK,CAAC,eAAe;EACzC;AACF;AACA;AACA;AACA;EAGE,QAAQQ,SAAS,CAACC,MAAM;IACtB,KAAK,CAAC;MAAE,OAAOV,IAAI;IACnB,KAAK,CAAC;MAAE,OAAOD,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC;IAClC;MAAS,OAAON,MAAM,CAACgB,IAAI,CAACF,SAAS,CAAC,CAAChB,MAAM,CAACM,MAAM,CAAC;EACvD;AACF;AAEAa,MAAM,CAACC,OAAO,GAAGL,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}