{"ast":null,"code":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\");\nvar reduce = require(\"reducible/reduce\");\nvar end = require(\"reducible/end\");\nfunction take(source, n) {\n  /**\n  Returns sequence of first `n` items of the given `source`. If `source`\n  contains less items than `n` then that's how  much items return sequence\n  will contain.\n   ## Example\n   print(take([ 1, 2, 3, 4, 5 ], 2))   // => < 1 2 >\n  print(take([ 1, 2, 3 ], 5))         // => < 1 2 3 >\n  **/\n\n  // If take `0` then optimize by returning an empty if less then `0`\n  // then just return `source` back.\n  if (n === 0) return void 0;\n  if (n < 0) return source;\n  return reducible(function reduceTake(next, initial) {\n    // Capture `n` into count, since modifying `n` directly will have side\n    // effects on subsequent calls.\n    var count = n;\n    reduce(source, function reduceTakeSource(value, result) {\n      count = count - 1;\n      result = next(value, result);\n\n      // If we have not taken `n` items yet just pass result back. Otherwise\n      // pass `end` of stream to a consumer. Note `reducible` will return\n      // `reduced(result)` back signaling source it should stop.\n      return count > 0 ? result : next(end);\n    }, initial);\n  });\n}\nmodule.exports = take;","map":{"version":3,"names":["reducible","require","reduce","end","take","source","n","reduceTake","next","initial","count","reduceTakeSource","value","result","module","exports"],"sources":["D:/New folder (3)/websites/node_modules/reducers/take.js"],"sourcesContent":["\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar end = require(\"reducible/end\")\n\nfunction take(source, n) {\n  /**\n  Returns sequence of first `n` items of the given `source`. If `source`\n  contains less items than `n` then that's how  much items return sequence\n  will contain.\n\n  ## Example\n\n  print(take([ 1, 2, 3, 4, 5 ], 2))   // => < 1 2 >\n  print(take([ 1, 2, 3 ], 5))         // => < 1 2 3 >\n  **/\n\n  // If take `0` then optimize by returning an empty if less then `0`\n  // then just return `source` back.\n  if (n === 0) return void(0)\n  if (n < 0) return source\n  return reducible(function reduceTake(next, initial) {\n    // Capture `n` into count, since modifying `n` directly will have side\n    // effects on subsequent calls.\n    var count = n\n    reduce(source, function reduceTakeSource(value, result) {\n      count = count - 1\n      result = next(value, result)\n\n      // If we have not taken `n` items yet just pass result back. Otherwise\n      // pass `end` of stream to a consumer. Note `reducible` will return\n      // `reduced(result)` back signaling source it should stop.\n      return count > 0 ? result :\n             next(end)\n    }, initial)\n  })\n}\n\nmodule.exports = take\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIE,GAAG,GAAGF,OAAO,CAAC,eAAe,CAAC;AAElC,SAASG,IAAIA,CAACC,MAAM,EAAEC,CAAC,EAAE;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAIE;EACA;EACA,IAAIA,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAE;EAC3B,IAAIA,CAAC,GAAG,CAAC,EAAE,OAAOD,MAAM;EACxB,OAAOL,SAAS,CAAC,SAASO,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAAE;IAClD;IACA;IACA,IAAIC,KAAK,GAAGJ,CAAC;IACbJ,MAAM,CAACG,MAAM,EAAE,SAASM,gBAAgBA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACtDH,KAAK,GAAGA,KAAK,GAAG,CAAC;MACjBG,MAAM,GAAGL,IAAI,CAACI,KAAK,EAAEC,MAAM,CAAC;;MAE5B;MACA;MACA;MACA,OAAOH,KAAK,GAAG,CAAC,GAAGG,MAAM,GAClBL,IAAI,CAACL,GAAG,CAAC;IAClB,CAAC,EAAEM,OAAO,CAAC;EACb,CAAC,CAAC;AACJ;AAEAK,MAAM,CAACC,OAAO,GAAGX,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}